name: Pull External Sites

on:
  push:
    branches: [master]            # re‑deploy when the workflow itself changes
  workflow_dispatch:            # …or run by hand
  schedule:
    - cron: "0 6 * * SUN"       # …or every Sunday to catch late edits

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true     # Continue with other years if one fails
    strategy:
      fail-fast: false          # Don't fail the entire matrix if one job fails
      matrix:
        include:
          # Remote sites in separate repositories
          - year: 2021
            type: static
          - year: 2023
            type: react
            build_dir: build  # create-react-app uses 'build' directory
          - year: 2024
            type: react
            build_dir: build  # create-react-app uses 'build' directory
    steps:
      - name: Checkout archive repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history to avoid conflicts

      # Checkout external repository
      - name: Checkout year ${{ matrix.year }}
        uses: actions/checkout@v4
        with:
          repository: bccss/hth${{ matrix.year }}
          path: external-site

      # Install Node.js only for sites that need building
      - name: Set up Node.js
        if: matrix.type == 'react' || matrix.type == 'vite'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: external-site/package-lock.json

      # Build for modern sites
      - name: Install deps & build
        if: matrix.type == 'react' || matrix.type == 'vite'
        working-directory: external-site
        continue-on-error: true  # Continue even if build fails
        env:
          # Prevent React from treating warnings as errors
          CI: "false"
          # Additional environment variables to skip checks
          ESLINT_NO_DEV_ERRORS: "true"
          DISABLE_ESLINT_PLUGIN: "true"
        run: |
          npm ci
          npm run build || echo "Build failed but continuing..."

      # Copy content to the year directory
      - name: Copy static site
        if: matrix.type == 'static'
        run: |
          mkdir -p ${{ matrix.year }}
          cp -r external-site/* ${{ matrix.year }}/

      # Copy for React/Vite sites
      - name: Copy built site
        if: matrix.type == 'react' || matrix.type == 'vite'
        continue-on-error: true  # Continue even if copy fails
        run: |
          mkdir -p ${{ matrix.year }}
          if [ -d "external-site/${{ matrix.build_dir }}" ]; then
            cp -r external-site/${{ matrix.build_dir }}/* ${{ matrix.year }}/
          elif [ -d "external-site/dist" ]; then
            cp -r external-site/dist/* ${{ matrix.year }}/
          else
            echo "Could not find build directory for ${{ matrix.year }}. Checking for common build directories..."
            ls -la external-site/
            # Create a placeholder if build failed
            cp placeholder.html ${{ matrix.year }}/index.html
          fi

      # Commit changes to repository with retry mechanism
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          
          # Get current branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          
          # Try to commit and push with retries
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Pull latest changes to avoid conflicts
            git pull origin $BRANCH_NAME --rebase
            
            # Add changes and commit
            git add ${{ matrix.year }}
            git commit -m "Update content for year ${{ matrix.year }}" || echo "No changes to commit"
            
            # Try to push
            if git push; then
              echo "Successfully pushed changes!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Push failed. Retry $RETRY_COUNT of $MAX_RETRIES..."
              sleep 5
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to push after $MAX_RETRIES attempts."
            exit 1
          fi